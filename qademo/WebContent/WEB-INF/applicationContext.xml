<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
	<!-- 定义数据源Bean，使用C3P0数据源实现 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl"
			value="jdbc:mysql://localhost:3306/temp?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull" />
		<!-- 指定连接数据库的用户名 --> 
		<property name="user" value="root" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="root" />
		<!-- 指定连接数据库连接池的最大连接数 -->
		<property name="maxPoolSize" value="20" />
		<!-- 指定连接数据库连接池的最小连接数 -->
		<property name="minPoolSize" value="2" /> 
		<!-- 指定连接数据库连接池的初始化连接数 -->
		<property name="initialPoolSize" value="2" />
		<!-- 指定连接数据库连接池的连接的最大空闲时间 -->
		<property name="maxIdleTime" value="20" />
	</bean>
	<!-- 定义Hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<!-- 设置Hibernate的相关属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
			</props>
		</property>
		<!-- 注册Hibernate的ORM映射文件 -->
		<property name="mappingLocations">
			<list>
				<value>classpath*:/com/igd/**/*.hbm.xml</value>
				<value>classpath*:/com/igd/**/**/*.hbm.xml</value>
			</list>
		</property>
	</bean>
	<!-- 定义Hibernate的事务管理器HibernateTransactionManager -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<!--依赖注入上面定义的sessionFactory -->
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 定义Spring的事务拦截器 TransactionInterceptor -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<!-- 事务拦截器bean需要依赖注入一个事务管理器 -->
		<property name="transactionManager" ref="transactionManager" />
		<!-- 定义需要进行事务拦截的方法及所采用的事务控制类型 -->
		<property name="transactionAttributes">
			<!-- 下面定义事务传播属性 -->
			<props>
				<!-- 以browse,query,list,load,get,check及is开头的所有方法采用只读型事务控制类型 -->
				<prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="browse*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="check*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="is*">PROPAGATION_REQUIRED,readOnly</prop>
				<!-- 所有方法均进行事务控制，如果当前没有事务，则新建一个事务 -->
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<!-- 定义BeanNameAutoProxyCreator 进行spring的事务处理 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<!-- 指定对满足哪些bean name的bean自动生成业务代理 -->
		<property name="beanNames">
			<!-- 下面是所有需要自动创建事务代理的bean -->
			<list>
				<value>*Service</value>
			</list>
			<!-- 此处可增加其他需要自动创建事务代理的bean -->
		</property>
		<!-- 下面定义BeanNameAutoProxyCreator所需的事务拦截器 -->
		<property name="interceptorNames">
			<list>
				<!-- 此处可增加其他新的Interceptor -->
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>

	<!-- 将日志切面交给Spring容器管理 -->
	<bean id="logAspectJ" class="com.igd.base.aop.LogAspectJ" />
	<!-- 使用XML方式进行AOP配置 -->
	<aop:config>
		<!-- 使用XML方式配置日志切面 -->
		<aop:aspect id="logaop" ref="logAspectJ">
			<!-- 定义切入点 拦截所有service方法 -->
			<aop:pointcut id="logpointcut"
				expression="execution(* com.igd.*.service.*.*(..))" />
			<!-- 将LogAspectJ切面中的myBeforeAdvice方法定义成前置通知 -->
			<aop:before pointcut-ref="logpointcut" method="myBeforeAdvice" />
			<!-- 将LogAspectJ切面中的myAfterReturningAdvice方法定义成后置通知 -->
			<aop:after-returning pointcut-ref="logpointcut"
				method="myAfterReturningAdvice" />
			<!-- 将LogAspectJ切面中的myAfterThrowingAdvice方法定义成异常通知 -->
			<aop:after-throwing pointcut-ref="logpointcut"
				method="myAfterThrowingAdvice" throwing="e" />
			<!-- 将LogAspectJ切面中的myAfterAdvice方法定义成最终通知 -->
			<aop:after pointcut-ref="logpointcut" method="myAfterAdvice" />
			<!-- 将LogAspectJ切面中的myAroundAdvice方法定义成环绕通知 -->
			<aop:around pointcut-ref="logpointcut" method="myAroundAdvice" />
		</aop:aspect>
	</aop:config>
	
	<!-- 装配通用数据库访问类BaseDaoImpl -->
	<bean id="baseDao" class="com.igd.base.dao.BaseDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="loginedCheckInterceptor" class="com.igd.base.interceptor.LoginedCheckInterceptor"
		scope="prototype">
		<property name="menuTreeService">
			<ref bean="menuTreeService" />
		</property>
	</bean>
	
	<!-- axis2 spring注入 -->
	<!--<bean id= "applicationContext" class = "org.apache.axis2.extensions.spring.receivers.ApplicationContextHolder"  />-->
	
	<import resource="classpath*:/com/igd/**/module-*.xml" />
	<import resource="classpath*:/com/igd/**/**/module-*.xml" />
</beans>